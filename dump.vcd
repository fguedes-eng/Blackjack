$date
	Tue Aug 05 01:57:49 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Blackjack_tb $end
$var wire 1 ! wsoma_terminada_tb $end
$var wire 6 " wsoma_tb [5:0] $end
$var wire 6 # wsoma_dealer_tb [5:0] $end
$var wire 1 $ wplayer_or_dealer_tb $end
$var wire 3 % wnext_state_tb [2:0] $end
$var wire 1 & win_tb $end
$var wire 1 ' whit_reg_tb $end
$var wire 1 ( whit_reg_press_tb $end
$var wire 1 ) wfirst_draw_tb $end
$var wire 2 * wdraw_tb [1:0] $end
$var wire 7 + wdeck_pos_tb [6:0] $end
$var wire 3 , wcurrent_state_tb [2:0] $end
$var wire 4 - wcard_tb [3:0] $end
$var wire 1 . tie_tb $end
$var wire 1 / lose_tb $end
$var reg 1 0 clk_tb $end
$var reg 1 1 hit_tb $end
$var reg 1 2 reset_tb $end
$var reg 1 3 stay_tb $end
$var integer 32 4 i [31:0] $end
$var reg 32 5 seed [31:0] $end
$scope module DUT $end
$var wire 1 0 clk $end
$var wire 1 1 hit $end
$var wire 1 / lose $end
$var wire 1 2 reset $end
$var wire 1 3 stay $end
$var wire 1 . tie $end
$var wire 4 6 wcard [3:0] $end
$var wire 3 7 wcurrent_state [2:0] $end
$var wire 2 8 wdraw [1:0] $end
$var wire 1 ) wfirst_draw $end
$var wire 1 ' whit_reg $end
$var wire 1 ( whit_reg_press $end
$var wire 1 & win $end
$var wire 3 9 wnext_state [2:0] $end
$var wire 1 $ wplayer_or_dealer $end
$var wire 6 : wsoma [5:0] $end
$var wire 6 ; wsoma_dealer [5:0] $end
$var wire 1 ! wsoma_terminada $end
$var wire 7 < wdeck_pos [6:0] $end
$var wire 6 = soma_dealer [5:0] $end
$var wire 6 > soma [5:0] $end
$var reg 4 ? card [3:0] $end
$var reg 3 @ current_state [2:0] $end
$var reg 2 A draw [1:0] $end
$var reg 1 B drawing_cards $end
$var reg 1 C first_cards_completed $end
$var reg 1 D first_draw $end
$var reg 1 E hit_reg $end
$var reg 1 F hit_reg_press $end
$var reg 1 G lose_reg $end
$var reg 3 H next_state [2:0] $end
$var reg 1 I player_or_dealer $end
$var reg 1 J soma_terminada $end
$var reg 1 K stop_dealing $end
$var reg 1 L tie_reg $end
$var reg 4 M valor [3:0] $end
$var reg 1 N win_reg $end
$var integer 32 O deck_pos [31:0] $end
$var integer 32 P hand_pos [31:0] $end
$var integer 32 Q i [31:0] $end
$var integer 32 R out_hand_pos [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx R
bx Q
bx P
bx O
xN
bx M
xL
xK
xJ
xI
bx H
xG
xF
xE
xD
xC
xB
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
b11111111000010111100110 5
bx 4
x3
02
01
00
x/
x.
bx -
bx ,
bx +
bx *
x)
x(
x'
x&
bx %
x$
bx #
bx "
x!
$end
#3
b0 %
b0 9
b0 H
1(
1F
0'
0E
10
#6
00
#9
0K
b0 ,
b0 7
b0 @
10
#10
12
#12
00
#15
0B
b0 P
0!
0J
1)
1D
b10100 +
b10100 <
b110100 Q
b10100 O
10
#18
00
#20
02
#21
10
#24
00
#27
10
#30
00
11
b110100 4
#33
b1 %
b1 9
b1 H
0(
0F
1'
1E
10
#36
00
#39
b0 "
b0 :
b0 >
b0 M
b1011 R
b1100 Q
0$
0I
b1 ,
b1 7
b1 @
0'
0E
10
#42
00
#45
0)
0D
b10 *
b10 8
b10 A
10
#48
00
#51
b1000 "
b1000 :
b1000 >
b0 M
b1011 R
b1100 Q
b1 P
b10 +
b10 <
b1 *
b1 8
b1 A
b1000 -
b1000 6
b1000 ?
b10 O
1B
10
#54
00
#57
b1011 "
b1011 :
b1011 >
b0 M
b1011 R
b1100 Q
b10 P
b1010 +
b1010 <
b0 *
b0 8
b0 A
b11 -
b11 6
b11 ?
b1010 O
10
#60
00
#63
b10 %
b10 9
b10 H
1C
0B
10
#66
00
#69
b10 ,
b10 7
b10 @
10
#72
00
#75
10
#78
00
#81
10
#84
00
#87
10
#90
00
#93
10
#96
00
#99
10
#102
00
#105
10
#108
00
#111
10
#114
00
#117
10
#120
00
#123
10
#126
00
#129
10
#130
01
#132
00
#135
1(
1F
10
#138
00
#141
10
#144
00
#147
10
#150
00
11
#153
0(
0F
1'
1E
10
#156
00
#159
b1 *
b1 8
b1 A
0'
0E
10
#162
00
#165
b11 %
b11 9
b11 H
b10101 "
b10101 :
b10101 >
b0 M
b1011 R
b1100 Q
b0 P
b100001 +
b100001 <
b0 *
b0 8
b0 A
b1011 -
b1011 6
b1011 ?
b100001 O
1B
10
#168
00
#171
b0 #
b0 ;
b0 =
b1011 R
b1100 Q
1$
1I
0B
b11 ,
b11 7
b11 @
10
#174
00
#177
b1 *
b1 8
b1 A
10
#180
00
#183
b1000 #
b1000 ;
b1000 =
b0 M
b1011 R
b1100 Q
b1 P
b10000 +
b10000 <
b1000 -
b1000 6
b1000 ?
b10000 O
1B
b0 *
b0 8
b0 A
10
#186
00
#189
0B
b1 *
b1 8
b1 A
10
#192
00
#195
b1100 #
b1100 ;
b1100 =
b0 M
b1011 R
b1100 Q
b10 P
b10 +
b10 <
b100 -
b100 6
b100 ?
b10 O
1B
b0 *
b0 8
b0 A
10
#198
00
#201
0B
b1 *
b1 8
b1 A
10
#204
00
#207
b111 +
b111 <
b111 O
1B
b10 *
b10 8
b10 A
10
#210
00
#213
b100 %
b100 9
b100 H
1K
b10100 #
b10100 ;
b10100 =
b0 M
b1011 R
b1100 Q
b11 P
b100000 +
b100000 <
b1000 -
b1000 6
b1000 ?
b100000 O
b1 *
b1 8
b1 A
10
#216
00
#219
0/
0G
0.
0L
1&
1N
b10 *
b10 8
b10 A
b100 ,
b100 7
b100 @
10
#222
00
#225
10
#228
00
#231
10
#234
00
#237
10
#240
00
#243
10
#246
00
#249
10
#250
01
#252
00
#255
1(
1F
10
#258
00
#261
10
#264
00
#267
10
#270
00
13
#273
10
#276
00
#279
10
#282
00
#285
10
#288
00
#291
10
#294
00
#297
10
#300
00
#303
10
#306
00
#309
10
#312
00
#315
10
#318
00
#321
10
#324
00
#327
10
#330
00
#333
10
#336
00
#339
10
#342
00
#345
10
#348
00
#351
10
#354
00
#357
10
#360
00
#363
10
#366
00
#369
10
